"""remove user.

Revision ID: 6548bf185f76
Revises: b049c50f01a6
Create Date: 2021-07-08 11:21:12.673845

"""
from alembic import op
from sqlalchemy.orm.session import Session
from lccs_db.models import LucClassificationSystem
import sqlalchemy as sa

from sample_db.models import Datasets, CollectMethod, DatasetView


# revision identifiers, used by Alembic.
revision = '6548bf185f76'
down_revision = 'b049c50f01a6'
branch_labels = ()
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('datasets_user_id_users_fkey', 'datasets', schema='sampledb', type_='foreignkey')
    session = Session(bind=op.get_bind())
    session.execute(f"DROP VIEW IF EXISTS {DatasetView.__table__}")
    session.commit()

    result = session.execute(
            """SELECT con.conname, information_schema.tables.table_name
                   FROM pg_catalog.pg_constraint con
                        INNER JOIN pg_catalog.pg_class rel
                                   ON rel.oid = con.conrelid
                        INNER JOIN pg_catalog.pg_namespace nsp
                                   ON nsp.oid = connamespace
                        INNER JOIN information_schema.tables
                                    ON  information_schema.tables.table_schema = nsp.nspname
                                    AND  nsp.nspname = 'sampledb'
                                    AND rel.relname = information_schema.tables.table_name
                   WHERE information_schema.tables.table_name ~ '^dataset_'
                   AND con.conname ~ 'user_id_fkey$';
                   """
    )

    for r in result:
        op.drop_constraint(f'{r[0]}', f'{r[1]}', schema='sampledb', type_='foreignkey')
        session.execute(f"DROP VIEW IF EXISTS sampledb.v_{r[1]};")
    session.execute(f"DROP TABLE sampledb.users ;")
    session.commit()

    session.commit()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='sampledb'
    )
    op.create_foreign_key('datasets_user_id_users_fkey', 'datasets', 'users', ['user_id'], ['id'], source_schema='sampledb', referent_schema='sampledb', ondelete='CASCADE')

    session = Session(bind=op.get_bind())
    result = session.execute(
        "SELECT table_name FROM information_schema.tables WHERE table_name ~ '^dataset_' AND table_schema = 'sampledb';"
    )
    for r in result:
        op.create_foreign_key(f'{r}_user_id_fkey', f'{r}', 'users', ['user_id'], ['id'], source_schema='sampledb', referent_schema='sampledb', ondelete='CASCADE')

    session.execute("CREATE VIEW {} AS " \
                    "SELECT datasets.created_at, datasets.updated_at, datasets.id, datasets.name, " \
                    "datasets.title, datasets.start_date, datasets.end_date, datasets.dataset_table_name, " \
                    "datasets.version, datasets.version_successor, datasets.version_predecessor, " \
                    "datasets.description, class_systems.name AS classification_system_name, " \
                    "class_systems.id AS classification_system_id, class_systems.version AS classification_system_version, " \
                    "users.id AS user_id, users.full_name AS user_name, collect_method.name AS collect_method_name, " \
                    "collect_method.id AS collect_method_id, " \
                    "datasets.metadata_json, datasets.is_public "
                    "FROM {} AS datasets, {} AS class_systems, {} AS users, {} AS collect_method " \
                    "WHERE users.id = datasets.user_id " \
                    "AND class_systems.id = datasets.classification_system_id " \
                    "AND collect_method.id = datasets.collect_method_id;"
                    .format(DatasetView.__table__,
                            Datasets.__table__,
                            LucClassificationSystem.__table__,
                            'sampledb.users',
                            CollectMethod.__table__)
                    )
    session.commit()
    # ### end Alembic commands ###
